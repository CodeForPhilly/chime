name: Deployment artifacts

on:
  release:
    types:
      - published
  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: penn-chime
  KUBE_CONFIG_DATA: ${{ secrets.kubeconfig_data_preprod }}
  # For hub CLI tool
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  release-data:

    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2

      - name: Generate build metadata
        run: |

          IMAGE_PATH="docker.pkg.github.com/${GITHUB_REPOSITORY,,}/${IMAGE_NAME}"

          # Tagged release
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            # Strip git ref prefix from version
            TAGNAME=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

            # Strip "v" prefix from tag name
            VERSION=$(echo $TAGNAME | sed -e 's/^v//')
          else
            VERSION=${{ github.sha }}
          fi

          IMAGE_ID=$IMAGE_PATH:$VERSION

          echo "release/registry-path: $IMAGE_PATH"
          echo "release/tag:           $TAGNAME"
          echo "release/version:       $VERSION"
          echo "release/registry-id:   $IMAGE_ID"

          mkdir release
          printf '%s' "$IMAGE_PATH" > release/registry-path
          printf '%s' "$TAGNAME"    > release/tag
          printf '%s' "$VERSION"    > release/version
          printf '%s' "$IMAGE_ID"   > release/registry-id

      - name: Expose release information
        uses: actions/upload-artifact@v1
        with:
          name: release
          path: release

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  publish-image:
    # Ensure test job passes before pushing image.
    needs:
      - test
      - release-data

    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2

      - name: Get release information
        uses: actions/download-artifact@v1
        with:
          name: release

      - name: Get deployment information
        run: |
          hub api /repos/${{ github.repository }}/deployments?ref=$(cat release/tag) -X GET | jq .[0] > /tmp/deployment.json

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          # Publish tag
          image_id=$(cat release/registry-id)
          docker tag image $image_id
          docker push $image_id

          # Only publish :latest tag for production releases
          if ! ${{ github.event.release.prerelease }}; then
            image_path=$(cat release/registry-path)
            docker tag image $image_path:latest
            docker push $image_path:latest
            echo prod release published to :latest
          fi

      - name: Mark deployment as failed
        if: failure()
        run: |
          hub api /repos/${{ github.repository }}/deployments/$(jq .id < /tmp/deployment.json)/statuses  \
            -X POST                                                                                      \
            -H "Accept: application/json, application/vnd.github.flash-preview+json"                     \
            --input <(cat <<EOF
          {
            "state": "failure",
            "description": "Error in job publish-image",
            "log_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF)
